spec:
  inputs:
    gcp_project_id:
      description: "Google Cloud Project ID"
      type: string
      default: ""
    gcp_region:
      description: "Google Cloud region"
      type: string
      default: "us-central1"
    review_type:
      description: "Type of review to perform"
      type: string
      default: "comprehensive"
    post_comment:
      description: "Whether to post review as MR comment"
      type: boolean
      default: true
    ai_model:
      description: "Vertex AI model to use"
      type: string
      default: "codechat-bison@001"
    severity_threshold:
      description: "Minimum severity to report (info, low, medium, high, critical)"
      type: string
      default: "medium"

---

# AI Code Reviewer Component (SDK-based)
ai_code_reviewer:
  stage: test
  image: python:3.11
  variables:
    GCP_PROJECT_ID: $[[ inputs.gcp_project_id ]]
    GCP_REGION: $[[ inputs.gcp_region ]]
    REVIEW_TYPE: $[[ inputs.review_type ]]
    POST_COMMENT: $[[ inputs.post_comment ]]
    AI_MODEL: $[[ inputs.ai_model ]]
    SEVERITY_THRESHOLD: $[[ inputs.severity_threshold ]]
  before_script:
    - echo "ðŸ¤– Starting AI Code Review with CI Code Companion SDK..."
    - pip install --upgrade pip
    - pip install -e .  # Install SDK from current repo
    - python --version
    - echo "GCP Project: $GCP_PROJECT_ID"
    - echo "Review Type: $REVIEW_TYPE"
  script:
    - |
      python << 'EOF'
      import os
      import sys
      import asyncio
      import logging
      from pathlib import Path
      import json

      # Import CI Code Companion SDK
      from ci_code_companion_sdk import CICodeCompanionSDK, SDKConfig
      from ci_code_companion_sdk.core.exceptions import SDKError, ConfigurationError

      # Configure logging
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)

      async def main():
          try:
              # Initialize SDK
              logger.info("Initializing CI Code Companion SDK...")
              
              project_id = os.getenv('GCP_PROJECT_ID')
              if not project_id:
                  logger.error("GCP_PROJECT_ID is required")
                  sys.exit(1)
              
              # Configure SDK
              config = SDKConfig(
                  ai_provider='vertex_ai',
                  project_id=project_id,
                  region=os.getenv('GCP_REGION', 'us-central1'),
                  log_level='INFO'
              )
              
              sdk = CICodeCompanionSDK(config=config)
              logger.info("âœ… SDK initialized successfully")
              
              # Get changed files
              changed_files = get_changed_files()
              
              if not changed_files:
                  logger.info("No files to review")
                  return
              
              logger.info(f"Reviewing {len(changed_files)} files...")
              
              # Review all files
              review_results = []
              severity_levels = ['info', 'low', 'medium', 'high', 'critical']
              threshold = os.getenv('SEVERITY_THRESHOLD', 'medium')
              threshold_index = severity_levels.index(threshold) if threshold in severity_levels else 2
              
              for file_path in changed_files:
                  if should_review_file(file_path):
                      try:
                          logger.info(f"Analyzing {file_path}...")
                          
                          # Read file content
                          with open(file_path, 'r', encoding='utf-8') as f:
                              content = f.read()
                          
                          # Analyze with SDK
                          result = await sdk.analyze_file(file_path, content)
                          
                          # Filter by severity threshold
                          filtered_issues = []
                          for issue in result.issues:
                              issue_severity = issue.get('severity', 'info')
                              issue_index = severity_levels.index(issue_severity) if issue_severity in severity_levels else 0
                              if issue_index >= threshold_index:
                                  filtered_issues.append(issue)
                          
                          if filtered_issues or result.suggestions:
                              review_results.append({
                                  'file_path': file_path,
                                  'issues': filtered_issues,
                                  'suggestions': result.suggestions,
                                  'confidence_score': result.confidence_score,
                                  'metadata': result.metadata
                              })
                              
                      except Exception as e:
                          logger.error(f"Error analyzing {file_path}: {str(e)}")
              
              # Create artifacts directory
              os.makedirs('artifacts', exist_ok=True)
              
              # Generate markdown report
              report = generate_markdown_report(review_results, threshold)
              
              with open('artifacts/ai_code_review.md', 'w') as f:
                  f.write(report)
              
              # Generate JSON report for programmatic use
              json_report = {
                  'review_summary': {
                      'files_reviewed': len(changed_files),
                      'files_with_issues': len(review_results),
                      'total_issues': sum(len(r['issues']) for r in review_results),
                      'total_suggestions': sum(len(r['suggestions']) for r in review_results),
                      'severity_threshold': threshold
                  },
                  'results': review_results
              }
              
              with open('artifacts/ai_code_review.json', 'w') as f:
                  json.dump(json_report, f, indent=2)
              
              logger.info(f"Generated review report with {len(review_results)} files containing issues")
              
              # Post comment to GitLab MR if enabled
              if os.getenv('POST_COMMENT', 'true').lower() == 'true' and os.getenv('CI_MERGE_REQUEST_IID'):
                  await post_gitlab_comment(report)
              
              logger.info("ðŸŽ‰ AI code review completed successfully!")
              
          except (SDKError, ConfigurationError) as e:
              logger.error(f"SDK error: {str(e)}")
              sys.exit(1)
          except Exception as e:
              logger.error(f"Error in AI code review: {str(e)}")
              sys.exit(1)

      def get_changed_files():
          """Get list of changed files in the current commit/MR"""
          import subprocess
          
          try:
              # Get changed files from git
              if os.getenv('CI_MERGE_REQUEST_IID'):
                  # In MR context, get diff from target branch
                  target_branch = os.getenv('CI_MERGE_REQUEST_TARGET_BRANCH_NAME', 'main')
                  result = subprocess.run(
                      ['git', 'diff', '--name-only', f'origin/{target_branch}...HEAD'],
                      capture_output=True, text=True, check=True
                  )
              else:
                  # Get changed files in current commit
                  result = subprocess.run(
                      ['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'],
                      capture_output=True, text=True, check=True
                  )
              
              files = [f.strip() for f in result.stdout.split('\n') if f.strip()]
              return [f for f in files if os.path.exists(f)]
              
          except subprocess.CalledProcessError as e:
              logger.warning(f"Failed to get changed files: {e}")
              return []

      def should_review_file(file_path):
          """Check if file should be reviewed"""
          # Review code files only
          code_extensions = {'.py', '.js', '.jsx', '.ts', '.tsx', '.java', '.kt', '.go', '.rs', '.rb', '.php', '.cs', '.cpp', '.c', '.h'}
          return Path(file_path).suffix.lower() in code_extensions

      def generate_markdown_report(results, threshold):
          """Generate markdown report from review results"""
          if not results:
              return f"""# ðŸ¤– AI Code Review Summary

## âœ… No Issues Found

All reviewed files passed the AI code review with severity threshold: **{threshold.title()}**

Generated by CI Code Companion SDK
"""
          
          total_issues = sum(len(r['issues']) for r in results)
          total_suggestions = sum(len(r['suggestions']) for r in results)
          
          report = f"""# ðŸ¤– AI Code Review Summary

## Overview
- **Files Reviewed**: {len(results)}
- **Issues Found**: {total_issues}
- **Suggestions**: {total_suggestions}
- **Severity Threshold**: {threshold.title()}

"""
          
          # Group by severity
          severity_counts = {'critical': 0, 'high': 0, 'medium': 0, 'low': 0, 'info': 0}
          for result in results:
              for issue in result['issues']:
                  severity = issue.get('severity', 'info')
                  if severity in severity_counts:
                      severity_counts[severity] += 1

          report += "## Issues by Severity\n"
          for severity, count in severity_counts.items():
              if count > 0:
                  emoji = {'critical': 'ðŸ”´', 'high': 'ðŸŸ ', 'medium': 'ðŸŸ¡', 'low': 'ðŸ”µ', 'info': 'âšª'}[severity]
                  report += f"- {emoji} **{severity.title()}**: {count}\n"

          # Detailed results
          report += "\n## Detailed Results\n\n"
          
          for result in results:
              file_path = result['file_path']
              issues = result['issues']
              suggestions = result['suggestions']
              confidence = result['confidence_score']
              
              report += f"### ðŸ“„ `{file_path}`\n"
              report += f"**Confidence Score**: {confidence:.2f}\n\n"
              
              if issues:
                  report += "**Issues Found:**\n"
                  for issue in issues:
                      severity = issue.get('severity', 'info')
                      title = issue.get('title', 'Unknown Issue')
                      description = issue.get('description', '')
                      line = issue.get('line_number')
                      
                      emoji = {'critical': 'ðŸ”´', 'high': 'ðŸŸ ', 'medium': 'ðŸŸ¡', 'low': 'ðŸ”µ', 'info': 'âšª'}[severity]
                      line_info = f" (Line {line})" if line else ""
                      
                      report += f"- {emoji} **{title}**{line_info}\n"
                      if description:
                          report += f"  {description}\n"
                      
                      if issue.get('suggestion'):
                          report += f"  ðŸ’¡ *Suggestion: {issue['suggestion']}*\n"
                      report += "\n"
              
              if suggestions:
                  report += "**Suggestions:**\n"
                  for suggestion in suggestions:
                      title = suggestion.get('title', 'Unknown Suggestion')
                      description = suggestion.get('description', '')
                      impact = suggestion.get('impact', 'unknown')
                      
                      report += f"- ðŸ’¡ **{title}** (Impact: {impact})\n"
                      if description:
                          report += f"  {description}\n"
                      report += "\n"
              
              report += "---\n\n"
          
          report += "*Generated by CI Code Companion SDK*"
          return report

      async def post_gitlab_comment(report):
          """Post review results as GitLab MR comment"""
          try:
              import requests
              
              gitlab_token = os.getenv('GITLAB_TOKEN')
              project_id = os.getenv('CI_PROJECT_ID')
              mr_iid = os.getenv('CI_MERGE_REQUEST_IID')
              gitlab_url = os.getenv('CI_SERVER_URL', 'https://gitlab.com')
              
              if not all([gitlab_token, project_id, mr_iid]):
                  logger.warning("Missing GitLab credentials for posting comment")
                  return
              
              url = f"{gitlab_url}/api/v4/projects/{project_id}/merge_requests/{mr_iid}/notes"
              headers = {'Private-Token': gitlab_token}
              data = {'body': report}
              
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 201:
                  logger.info("âœ… Posted review comment to GitLab MR")
              else:
                  logger.warning(f"Failed to post comment: {response.status_code}")
                  
          except Exception as e:
              logger.warning(f"Failed to post GitLab comment: {e}")

      if __name__ == "__main__":
          asyncio.run(main())
      EOF
  artifacts:
    paths:
      - artifacts/
    reports:
      junit: artifacts/ai_code_review.json
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
  allow_failure: true 