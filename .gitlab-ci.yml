stages:
  - validate
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  PYTHON_VERSION: "3.11"

# Template for Python jobs
.python_base:
  image: python:$PYTHON_VERSION
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt

# Validate code quality
lint:
  extends: .python_base
  stage: validate
  script:
    - flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    - black --check src/ tests/
  only:
    - merge_requests
    - main
    - develop

# Run unit tests
test:
  extends: .python_base
  stage: test
  script:
    - pytest tests/ --cov=src --cov-report=xml --cov-report=term
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

# Build component validation
validate_component:
  stage: build
  image: registry.gitlab.com/gitlab-org/cli:latest
  script:
    - echo "Validating CI/CD component structure..."
    - ls -la components/
    - cat components/ai-test-generator/template.yml
  only:
    - merge_requests
    - main

# Integration test with sample project
integration_test:
  stage: test
  image: python:$PYTHON_VERSION
  variables:
    GCP_PROJECT_ID: "ci-code-companion-test"
    GCP_REGION: "us-central1"
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - echo "Running integration tests..."
    - python scripts/test_vertex_ai_connection.py
    - python scripts/test_component_integration.py
  only:
    - schedules
    - main

# Deploy component to catalog (manual)
deploy_to_catalog:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/cli:latest
  script:
    - echo "Deploying to CI/CD Catalog..."
    - echo "Component version: $CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
    - when: manual
  environment:
    name: catalog
    url: https://gitlab.com/your-group/ci-code-companion 